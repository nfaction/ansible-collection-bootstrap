name: Update Ansible Roles

on:
  schedule:
    # Run weekly on Sundays at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-roles:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Update internal roles
      run: |
        set -e
        echo "Updating internal roles..."
        
        # Update ssh_config role
        if git subtree pull --prefix=roles/ssh_config https://github.com/nfaction/ansible-ssh-config.git master --squash; then
          echo "‚úì Updated ssh_config role"
        else
          echo "‚ö† Failed to update ssh_config role or no changes available"
        fi
        
        # Update bootstrap role
        if git subtree pull --prefix=roles/bootstrap https://github.com/nfaction/ansible-bootstrap.git master --squash; then
          echo "‚úì Updated bootstrap role"
        else
          echo "‚ö† Failed to update bootstrap role or no changes available"
        fi
        
        # Update ssh_port_probe role
        if git subtree pull --prefix=roles/ssh_port_probe https://github.com/nfaction/ansible-ssh-port-probe.git master --squash; then
          echo "‚úì Updated ssh_port_probe role"
        else
          echo "‚ö† Failed to update ssh_port_probe role or no changes available"
        fi
        
        # Update x0_vnc role
        if git subtree pull --prefix=roles/x0_vnc https://github.com/nfaction/ansible-x0-vnc.git master --squash; then
          echo "‚úì Updated x0_vnc role"
        else
          echo "‚ö† Failed to update x0_vnc role or no changes available"
        fi
        
        # Update ntp role
        if git subtree pull --prefix=roles/ntp https://github.com/nfaction/ansible-ntp.git master --squash; then
          echo "‚úì Updated ntp role"
        else
          echo "‚ö† Failed to update ntp role or no changes available"
        fi
        
        # Update proxmox_config role
        if git subtree pull --prefix=roles/proxmox_config https://github.com/nfaction/proxmox-config.git master --squash; then
          echo "‚úì Updated proxmox_config role"
        else
          echo "‚ö† Failed to update proxmox_config role or no changes available"
        fi

    - name: Update external roles
      run: |
        set -e
        echo "Updating external roles..."
        
        # Update docker role
        if git subtree pull --prefix=roles/docker https://github.com/lean-delivery/ansible-role-docker.git master --squash; then
          echo "‚úì Updated docker role"
        else
          echo "‚ö† Failed to update docker role or no changes available"
        fi
        
        # Update geerlingguy_docker role
        if git subtree pull --prefix=roles/geerlingguy_docker https://github.com/geerlingguy/ansible-role-docker.git master --squash; then
          echo "‚úì Updated geerlingguy_docker role"
        else
          echo "‚ö† Failed to update geerlingguy_docker role or no changes available"
        fi

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Ansible
      run: |
        pip install ansible-core

    - name: Check for changes and prepare version
      id: check_changes
      run: |
        if git diff --quiet HEAD~1 HEAD; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
          
          # Extract current version and increment patch version
          current_version=$(grep "^version:" galaxy.yml | sed 's/version: //')
          echo "Current version: $current_version"
          
          # Split version into parts
          IFS='.' read -r major minor patch <<< "$current_version"
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          
          # Update version in galaxy.yml
          sed -i "s/^version:.*/version: $new_version/" galaxy.yml
          
          # Commit version bump
          git add galaxy.yml
          git commit -m "chore: bump version to $new_version"
        fi

    - name: Build collection
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        echo "Building Ansible collection..."
        ansible-galaxy collection build
        
        # Get the built collection filename
        collection_file=$(ls nfaction-bootstrap-*.tar.gz | head -1)
        echo "Built collection: $collection_file"
        echo "collection_file=$collection_file" >> $GITHUB_OUTPUT
      id: build

    - name: Publish to Ansible Galaxy
      if: steps.check_changes.outputs.changes == 'true' && github.event_name != 'pull_request'
      env:
        GALAXY_TOKEN: ${{ secrets.ANSIBLE_GALAXY_API_TOKEN }}
      run: |
        if [ -z "$GALAXY_TOKEN" ]; then
          echo "‚ö†Ô∏è ANSIBLE_GALAXY_API_TOKEN secret not set - skipping Galaxy publish"
          echo "To enable publishing, add your Galaxy API token as a repository secret"
          echo "collection_published=false" >> $GITHUB_OUTPUT
        else
          echo "Publishing collection to Ansible Galaxy..."
          if ansible-galaxy collection publish ${{ steps.build.outputs.collection_file }} --token "$GALAXY_TOKEN"; then
            echo "‚úì Successfully published to Ansible Galaxy"
            echo "collection_published=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to publish to Ansible Galaxy"
            echo "collection_published=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi
      id: publish

    - name: Create Pull Request
      if: steps.check_changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update ansible roles via automated workflow"
        title: "chore: update ansible roles"
        body: |
          ## Automated Role Updates and Release
          
          This PR contains updates to Ansible roles via git subtree pull operations, version bump, and collection build.
          
          ### Changes Made
          
          - **Version Update**: Bumped version to `${{ steps.check_changes.outputs.new_version }}`
          - **Role Updates**: Updated all configured git subtrees
          - **Collection Build**: Built and published new collection version to Ansible Galaxy
          
          ### Updated Roles
          
          The following roles have been checked for updates:
          
          **Internal Roles:**
          - `roles/ssh_config` - SSH configuration management
          - `roles/bootstrap` - System bootstrapping
          - `roles/ssh_port_probe` - SSH port probing utility
          - `roles/x0_vnc` - VNC server configuration
          - `roles/ntp` - NTP service management
          - `roles/proxmox_config` - Proxmox configuration management
          
          **External Roles:**
          - `roles/docker` - Docker installation (lean-delivery)
          - `roles/geerlingguy_docker` - Docker installation (geerlingguy)
          
          ### Installation
          
          The updated collection can be installed with:
          ```bash
          ansible-galaxy collection install nfaction.bootstrap:${{ steps.check_changes.outputs.new_version }}
          ```
          
          ### Review Notes
          
          - Review the changes in each role directory for compatibility
          - Test the updated roles in your environment before merging
          - Check for any breaking changes in role interfaces
          - Version has been automatically incremented (patch level)
          
          ---
          *This PR was automatically created by GitHub Actions*
        branch: automated-role-updates
        delete-branch: true
        draft: false

    - name: Summary
      run: |
        echo "üéâ Role update workflow completed!"
        echo "- ‚úÖ Checked all configured git subtrees for updates"
        if [ "${{ steps.check_changes.outputs.changes }}" == "true" ]; then
          echo "- ‚úÖ Bumped version to ${{ steps.check_changes.outputs.new_version }}"
          echo "- ‚úÖ Built collection: ${{ steps.build.outputs.collection_file }}"
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            if [ "${{ steps.publish.outputs.collection_published }}" == "true" ]; then
              echo "- ‚úÖ Published collection to Ansible Galaxy"
            elif [ "${{ steps.publish.outputs.collection_published }}" == "false" ]; then
              echo "- ‚ö†Ô∏è Skipped Galaxy publish (API token not configured)"
            fi
          fi
          echo "- ‚úÖ Created pull request with all changes"
          echo ""
          echo "üì¶ Install with: ansible-galaxy collection install nfaction.bootstrap:${{ steps.check_changes.outputs.new_version }}"
          if [ "${{ steps.publish.outputs.collection_published }}" != "true" ]; then
            echo "üí° To enable auto-publishing, add ANSIBLE_GALAXY_API_TOKEN secret"
          fi
        else
          echo "- ‚ÑπÔ∏è  No changes detected, no actions taken"
        fi